plugins {
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id 'application'
    id 'maven-publish'
    id 'signing'
    id 'eclipse'
}

applicationName = 'SuperTMXMerge'
mainClassName = 'org.madlonkay.supertmxmerge.Main'

def getGitVersion = {
    if (!file('.git').directory) {
        return 'unknown'
    }
    StringBuilder output = new StringBuilder()
    'git describe --tags --always HEAD'.execute().waitForProcessOutput(output, null)
    return output.toString().trim()
}

version = getGitVersion()

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.jdesktop:beansbinding:1.2.1'
    compile 'com.googlecode.java-diff-utils:diffutils:1.2.1'
    testCompile 'junit:junit:4.12'
}

sourceSets {
    test {
        resources {
            srcDir 'src/main/resources'
        }
    }
}

jar {
    exclude 'org/omegat/**'
}

task genJAXB(type: Exec) {
    // See https://discuss.gradle.org/t/how-can-i-compile-generated-sources/7541
    outputs.dir file('src/main/java/gen')
    def xjbFile = file('src/main/resources/gen/core/tmx14/tmx14.xjb')
    def xsdFile = file('src/main/resources/gen/core/tmx14/tmx14.xsd')
    commandLine 'xjc', '-no-header', '-d', 'src/main/java', '-p', 'gen.core.tmx14', '-b', xjbFile.path, xsdFile.path
}
compileJava.source genJAXB.outputs.files, sourceSets.main.java

task macApp {
    description = 'Generate the Mac .app skeleton. Requires AppBundler (https://bitbucket.org/infinitekind/appbundler) ' +
        'to be available in ~/.ant/lib'
    def appbundlerJar = file("${System.getProperty('user.home')}/.ant/lib/appbundler-1.0ea.jar")
    onlyIf {
        appbundlerJar.file
    }
    def outputDir = file("${buildDir}/mac")
    outputs.dir outputDir
    doLast {
        delete outputDir
        outputDir.mkdirs()
        ant.taskdef(name: 'appbundler', classname: 'com.oracle.appbundler.AppBundlerTask',
            classpath: appbundlerJar)
        ant.appbundler(outputdirectory: outputDir.path,
            name: applicationName,
            displayname: applicationName,
            identifier: "org.madlonkay.${applicationName}",
            version: version,
            jvmrequired: targetCompatibility,
            shortversion: '${version}',
            mainclassname: mainClassName) {
            option(value: "-Xdock:name=${applicationName}")
        }
    }
}

distributions {
    main {
        contents {
            from('.') {
                include '*.md', 'LICENSE'
            }
        }
    }
    mac {
        contents {
            from macApp.outputs
            into("${applicationName}.app/Contents/Java") {
                from jar, configurations.runtime
            }
            from('.') {
                include '*.md', 'LICENSE'
            }
        }
    }
}

task debug(dependsOn: classes, type: JavaExec) {
    description = 'Launch app for debugging.' // Special debug task for NetBeans
    main = mainClassName
    classpath = sourceSets.main.runtimeClasspath
    debug true
}

shadowJar {
    archiveClassifier = ''
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    exclude 'org/omegat/**'
    archiveClassifier = 'sources'
}

javadoc {
    failOnError = false
    exclude 'org/omegat/**'
}

task javadocJar(type: Jar) {
    from javadoc.outputs
    archiveClassifier = 'javadoc'
}

ext {
    def propsFile = file('local.properties')
    if (propsFile.file) {
        def props = new Properties()
        propsFile.withInputStream { props.load(it) }
        props.each { k, v -> set(k, v) }
    } else {
        logger.log(LogLevel.WARN, "$propsFile not found")
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) { publication ->
            project.shadow.component(publication)
            groupId = 'org.madlonkay'
            artifactId = 'supertmxmerge'
            artifact sourceJar
            artifact javadocJar

            pom {
                name = 'SuperTMXMerge'
                description = 'A graphical diff & merge tool for TMX files'
                url = 'https://github.com/amake/SuperTMXMerge'
                scm {
                    connection = 'scm:git:https://github.com/amake/SuperTMXMerge'
                    developerConnection = 'scm:git:https://github.com/amake/SuperTMXMerge'
                    url = 'https://github.com/amake/SuperTMXMerge.git'
                }
                licenses {
                    license {
                        name = 'GNU Lesser General Public License, version 2.1'
                        url = 'https://www.gnu.org/licenses/lgpl-2.1.html'
                    }
                }
                developers {
                    developer {
                        id = 'amake'
                        name = 'Aaron Madlon-Kay'
                        email = 'aaron@madlon-kay.com'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials(PasswordCredentials) {
                username rootProject.findProperty('ossrhUsername')
                password rootProject.findProperty('ossrhPassword')
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}
